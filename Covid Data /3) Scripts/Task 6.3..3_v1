{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "59b1574d",
   "metadata": {},
   "source": [
    "# Importing Libaries and Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b469e30",
   "metadata": {},
   "source": [
    "### This script contains the following:,\n",
    "1. Import data and libraries,\n",
    "2. Data wrangling,\n",
    "3. Data cleaning,\n",
    "5. Checking for extreme values,\n",
    "6. Plotting a choropleth,\n",
    "7. Discussion of results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "526984fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting folium\n",
      "  Obtaining dependency information for folium from https://files.pythonhosted.org/packages/18/09/8569904c8ce5679cc02826d98de633c07abcd2443a23181e5f71ff9dacbc/folium-0.15.1-py2.py3-none-any.whl.metadata\n",
      "  Downloading folium-0.15.1-py2.py3-none-any.whl.metadata (3.4 kB)\n",
      "Collecting branca>=0.6.0 (from folium)\n",
      "  Obtaining dependency information for branca>=0.6.0 from https://files.pythonhosted.org/packages/2f/e7/603b136221de923055716d23e3047da71f92e0d8ba2c4517ce49a54fe768/branca-0.7.0-py3-none-any.whl.metadata\n",
      "  Downloading branca-0.7.0-py3-none-any.whl.metadata (1.5 kB)\n",
      "Requirement already satisfied: jinja2>=2.9 in c:\\users\\home\\anaconda3\\lib\\site-packages (from folium) (3.1.2)\n",
      "Requirement already satisfied: numpy in c:\\users\\home\\anaconda3\\lib\\site-packages (from folium) (1.24.3)\n",
      "Requirement already satisfied: requests in c:\\users\\home\\anaconda3\\lib\\site-packages (from folium) (2.31.0)\n",
      "Requirement already satisfied: xyzservices in c:\\users\\home\\anaconda3\\lib\\site-packages (from folium) (2022.9.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\home\\anaconda3\\lib\\site-packages (from jinja2>=2.9->folium) (2.1.1)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\home\\anaconda3\\lib\\site-packages (from requests->folium) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\home\\anaconda3\\lib\\site-packages (from requests->folium) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\home\\anaconda3\\lib\\site-packages (from requests->folium) (1.26.16)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\home\\anaconda3\\lib\\site-packages (from requests->folium) (2023.7.22)\n",
      "Downloading folium-0.15.1-py2.py3-none-any.whl (97 kB)\n",
      "   ---------------------------------------- 0.0/97.0 kB ? eta -:--:--\n",
      "   ---------------------------------------- 0.0/97.0 kB ? eta -:--:--\n",
      "   ---- ----------------------------------- 10.2/97.0 kB ? eta -:--:--\n",
      "   ------------ --------------------------- 30.7/97.0 kB 330.3 kB/s eta 0:00:01\n",
      "   ------------------------------------- -- 92.2/97.0 kB 655.4 kB/s eta 0:00:01\n",
      "   ---------------------------------------- 97.0/97.0 kB 556.4 kB/s eta 0:00:00\n",
      "Downloading branca-0.7.0-py3-none-any.whl (25 kB)\n",
      "Installing collected packages: branca, folium\n",
      "Successfully installed branca-0.7.0 folium-0.15.1\n"
     ]
    }
   ],
   "source": [
    "#Imported Libraries,\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib\n",
    "import os\n",
    "!pip install folium\n",
    "import folium\n",
    "import json"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afdc2a1e",
   "metadata": {},
   "source": [
    "# This command propts matplotlib visuals to appear in the notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e333aaf6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Imported path,\n",
    "path = r'C:\\Users\\Home\\Desktop\\Task 6.1'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dc75d1d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\Home\\\\Desktop\\\\Task 6.1'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "330233ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Imported clean dataset as json,\n",
    "world_geo = r'C:\\Users\\Home\\Desktop\\Task 6.1\\Data\\Prepared data\\world-countries.json'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "97a5b9b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\Home\\\\Desktop\\\\Task 6.1\\\\Data\\\\Prepared data\\\\world-countries.json'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "world_geo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "71968635",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Imported Covid dataset.csv,\n",
    "Covid_data = pd.read_csv(os.path.join(path, 'Data', 'Prepared data', 'Covid_data.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b9e04d8",
   "metadata": {},
   "source": [
    "# Data Wrangling and Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "edff54b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Country</th>\n",
       "      <th>Continent</th>\n",
       "      <th>Population</th>\n",
       "      <th>Total Cases</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>Total Recovered</th>\n",
       "      <th>Active Cases</th>\n",
       "      <th>Critical Cases</th>\n",
       "      <th>Tot Cases/1M pop</th>\n",
       "      <th>Deaths/1M pop</th>\n",
       "      <th>Total Tests</th>\n",
       "      <th>Tests/1M pop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>USA</td>\n",
       "      <td>North America</td>\n",
       "      <td>3.311981e+08</td>\n",
       "      <td>5032179</td>\n",
       "      <td>162804</td>\n",
       "      <td>2576668</td>\n",
       "      <td>2292707</td>\n",
       "      <td>18296</td>\n",
       "      <td>15194</td>\n",
       "      <td>492.0</td>\n",
       "      <td>63139605</td>\n",
       "      <td>190640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>South America</td>\n",
       "      <td>2.127107e+08</td>\n",
       "      <td>2917562</td>\n",
       "      <td>98644</td>\n",
       "      <td>2047660</td>\n",
       "      <td>771258</td>\n",
       "      <td>8318</td>\n",
       "      <td>13716</td>\n",
       "      <td>464.0</td>\n",
       "      <td>13206188</td>\n",
       "      <td>62085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>India</td>\n",
       "      <td>Asia</td>\n",
       "      <td>1.381345e+09</td>\n",
       "      <td>2025409</td>\n",
       "      <td>41638</td>\n",
       "      <td>1377384</td>\n",
       "      <td>606387</td>\n",
       "      <td>8944</td>\n",
       "      <td>1466</td>\n",
       "      <td>30.0</td>\n",
       "      <td>22149351</td>\n",
       "      <td>16035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Russia</td>\n",
       "      <td>Europe</td>\n",
       "      <td>1.459409e+08</td>\n",
       "      <td>871894</td>\n",
       "      <td>14606</td>\n",
       "      <td>676357</td>\n",
       "      <td>180931</td>\n",
       "      <td>2300</td>\n",
       "      <td>5974</td>\n",
       "      <td>100.0</td>\n",
       "      <td>29716907</td>\n",
       "      <td>203623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>5.938157e+07</td>\n",
       "      <td>538184</td>\n",
       "      <td>9604</td>\n",
       "      <td>387316</td>\n",
       "      <td>141264</td>\n",
       "      <td>539</td>\n",
       "      <td>9063</td>\n",
       "      <td>162.0</td>\n",
       "      <td>3149807</td>\n",
       "      <td>53044</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0       Country      Continent    Population  Total Cases  \\\n",
       "0           0           USA  North America  3.311981e+08      5032179   \n",
       "1           1        Brazil  South America  2.127107e+08      2917562   \n",
       "2           2         India           Asia  1.381345e+09      2025409   \n",
       "3           3        Russia         Europe  1.459409e+08       871894   \n",
       "4           4  South Africa         Africa  5.938157e+07       538184   \n",
       "\n",
       "   Total Deaths  Total Recovered  Active Cases  Critical Cases  \\\n",
       "0        162804          2576668       2292707           18296   \n",
       "1         98644          2047660        771258            8318   \n",
       "2         41638          1377384        606387            8944   \n",
       "3         14606           676357        180931            2300   \n",
       "4          9604           387316        141264             539   \n",
       "\n",
       "   Tot Cases/1M pop  Deaths/1M pop  Total Tests  Tests/1M pop  \n",
       "0             15194          492.0     63139605        190640  \n",
       "1             13716          464.0     13206188         62085  \n",
       "2              1466           30.0     22149351         16035  \n",
       "3              5974          100.0     29716907        203623  \n",
       "4              9063          162.0      3149807         53044  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checked head,\n",
    "Covid_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d07cc9cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(208, 13)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checked shape,\n",
    "Covid_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0fe52315",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping unneeded columns and creating data subset\n",
    "Covid_Data = Covid_data.drop(['Unnamed: 0','Continent'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fedc0550",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Country', 'Population', 'Total Cases', 'Total Deaths',\n",
       "       'Total Recovered', 'Active Cases', 'Critical Cases', 'Tot Cases/1M pop',\n",
       "       'Deaths/1M pop', 'Total Tests', 'Tests/1M pop'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Covid_Data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "49bc5001",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      False\n",
       "1      False\n",
       "2      False\n",
       "3      False\n",
       "4      False\n",
       "       ...  \n",
       "203    False\n",
       "204    False\n",
       "205    False\n",
       "206    False\n",
       "207    False\n",
       "Length: 208, dtype: bool"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checked for duplicates,\n",
    "Covid_Data.duplicated()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5844067e",
   "metadata": {},
   "source": [
    "No Duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e9d0a989",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Country             0\n",
       "Population          0\n",
       "Total Cases         0\n",
       "Total Deaths        0\n",
       "Total Recovered     0\n",
       "Active Cases        0\n",
       "Critical Cases      0\n",
       "Tot Cases/1M pop    0\n",
       "Deaths/1M pop       0\n",
       "Total Tests         0\n",
       "Tests/1M pop        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checked for missing values,\n",
    "Covid_Data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d64040f",
   "metadata": {},
   "source": [
    "No missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a0842fc",
   "metadata": {},
   "source": [
    "# Plotting a Chlropleth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e9a8cb3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Total Cases</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USA</td>\n",
       "      <td>5032179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>2917562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>India</td>\n",
       "      <td>2025409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Russia</td>\n",
       "      <td>871894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>538184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>5672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>5404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>Djibouti</td>\n",
       "      <td>5330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>Greece</td>\n",
       "      <td>5123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>Libya</td>\n",
       "      <td>4879</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Country  Total Cases\n",
       "0            USA      5032179\n",
       "1         Brazil      2917562\n",
       "2          India      2025409\n",
       "3         Russia       871894\n",
       "4   South Africa       538184\n",
       "..           ...          ...\n",
       "95       Lebanon         5672\n",
       "96       Croatia         5404\n",
       "97      Djibouti         5330\n",
       "98        Greece         5123\n",
       "99         Libya         4879\n",
       "\n",
       "[100 rows x 2 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Created dataframe with just the countries and the Covid values for total sales,\n",
    "data_to_plot = Covid_Data[['Country','Total Cases']]\n",
    "data_to_plot.head(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6574aeab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup a folium map at a high-level zoom,\n",
    "map = folium.Map(location = [100, 0], zoom_start = 1.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f07c050c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<folium.map.LayerControl at 0x29944cec6d0>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Choropleth maps bind Pandas DataFrames and json geometries.\n",
    "folium.Choropleth(\n",
    "    geo_data=world_geo,\n",
    "    data=data_to_plot,\n",
    "    columns=['Country', 'Total Cases'],\n",
    "    key_on='feature.properties.name',  # this part is very important - check your json file to see where the KEY is located,\n",
    "    fill_color='YlOrRd',\n",
    "    fill_opacity=0.6,\n",
    "    line_opacity=0.1,\n",
    "    legend_name=\"Total Cases by Country\"\n",
    ").add_to(map)\n",
    "\n",
    "folium.LayerControl().add_to(map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e5b20a6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the map as an HTML file,\n",
    "map.save('interactive_map.html')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7e36bb7",
   "metadata": {},
   "source": [
    "### Discussion of Results\n",
    "Based on map analysis the total cases are the highest in countries like USA, Brazil and India, while the cases are lowest in countries like Western Sahara, Vatican City and Falkland Islands"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
